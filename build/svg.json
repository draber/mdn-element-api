{
	"a": {
		"interface": "SVGAElement",
		"attributes": [
			"href",
			"hreflang",
			"target",
			"type"
		],
		"description": "The \\<a> SVG element creates a hyperlink to other web pages, files, locations in the same page, email addresses, or any other URL. It is very similar to HTML's a element."
	},
	"animate": {
		"interface": "SVGAnimateElement",
		"attributes": [],
		"description": "The SVG `<animate>` element provides a way to animate an attribute of an element over time."
	},
	"animateMotion": {
		"interface": "SVGAnimateMotionElement",
		"attributes": [
			"keyPoints",
			"path",
			"rotate"
		],
		"description": "The SVG `<animateMotion>` element provides a way to define how an element moves along a motion path."
	},
	"animateTransform": {
		"interface": "SVGAnimateTransformElement",
		"attributes": [],
		"description": "The `animateTransform` element animates a transformation attribute on its target element, thereby allowing animations to control translation, scaling, rotation, and/or skewing."
	},
	"circle": {
		"interface": "SVGCircleElement",
		"attributes": [
			"cx",
			"cy",
			"r",
			"pathLength"
		],
		"description": "The `<circle>` SVG element is an SVG basic shape, used to draw circles based on a center point and a radius."
	},
	"clipPath": {
		"interface": "SVGClipPathElement",
		"attributes": [
			"clipPathUnits"
		],
		"description": "The `<clipPath>` SVG element defines a clipping path, to be used by the clip-path property."
	},
	"defs": {
		"interface": "SVGDefsElement",
		"attributes": [],
		"description": "The `<defs>` element is used to store graphical objects that will be used at a later time. Objects created inside a `<defs>` element are not rendered directly. To display them you have to reference them (with a use element for example)."
	},
	"desc": {
		"interface": "SVGDescElement",
		"attributes": [],
		"description": "The `<desc>` element provides an accessible, long-text description of any SVG container element or graphics element."
	},
	"discard": {
		"interface": "SVGElement",
		"attributes": [],
		"description": "The `<discard>` SVG element allows authors to specify the time at which particular elements are to be discarded, thereby reducing the resources required by an SVG user agent. This is particularly useful to help SVG viewers conserve memory while displaying long-running documents."
	},
	"ellipse": {
		"interface": "SVGEllipseElement",
		"attributes": [
			"cx",
			"cy",
			"rx",
			"ry",
			"pathLength"
		],
		"description": "The `<ellipse>` element is an SVG basic shape, used to create ellipses based on a center coordinate, and both their x and y radius."
	},
	"feBlend": {
		"interface": "SVGFEBlendElement",
		"attributes": [],
		"description": "The `<feBlend>` SVG filter primitive composes two objects together ruled by a certain blending mode. This is similar to what is known from image editing software when blending two layers. The mode is defined by the mode attribute."
	},
	"feColorMatrix": {
		"interface": "SVGFEColorMatrixElement",
		"attributes": [],
		"description": "The `<feColorMatrix>` SVG filter element changes colors based on a transformation matrix. Every pixel's color value `[R,G,B,A]` is matrix multiplied by a 5 by 5 color matrix to create new color `[R',G',B',A']`."
	},
	"feComponentTransfer": {
		"interface": "SVGFEComponentTransferElement",
		"attributes": [],
		"description": "The `<feComponentTransfer>` SVG filter primitive performs color-component-wise remapping of data for each pixel. It allows operations like brightness adjustment, contrast adjustment, color balance or thresholding."
	},
	"feComposite": {
		"interface": "SVGFECompositeElement",
		"attributes": [],
		"description": "The `<feComposite>` SVG filter primitive performs the combination of two input images pixel-wise in image space using one of the Porter-Duff compositing operations: `over`, `in`, `atop`, `out`, `xor`, `lighter`, or `arithmetic`."
	},
	"feConvolveMatrix": {
		"interface": "SVGFEConvolveMatrixElement",
		"attributes": [],
		"description": "The `<feConvolveMatrix>` SVG filter primitive applies a matrix convolution filter effect. A convolution combines pixels in the input image with neighboring pixels to produce a resulting image. A wide variety of imaging operations can be achieved through convolutions, including blurring, edge detection, sharpening, embossing and beveling."
	},
	"feDiffuseLighting": {
		"interface": "SVGFEDiffuseLightingElement",
		"attributes": [],
		"description": "The `<feDiffuseLighting>` SVG filter primitive lights an image using the alpha channel as a bump map. The resulting image, which is an RGBA opaque image, depends on the light color, light position and surface geometry of the input bump map."
	},
	"feDisplacementMap": {
		"interface": "SVGFEDisplacementMapElement",
		"attributes": [],
		"description": "The `<feDisplacementMap>` SVG filter primitive uses the pixel values from the image from in2 to spatially displace the image from in."
	},
	"feDistantLight": {
		"interface": "SVGFEDistantLightElement",
		"attributes": [],
		"description": "The `<feDistantLight>` filter primitive defines a distant light source that can be used within a lighting filter primitive: feDiffuseLighting or feSpecularLighting."
	},
	"feDropShadow": {
		"interface": "SVGFEDropShadowElement",
		"attributes": [
			"dx",
			"dy",
			"stdDeviation"
		],
		"description": "The SVG `<feDropShadow>` filter primitive creates a drop shadow of the input image. It can only be used inside a {{SVGElement('filter')}} element."
	},
	"feFlood": {
		"interface": "SVGFEFloodElement",
		"attributes": [],
		"description": "The `<feFlood>` SVG filter primitive fills the filter subregion with the color and opacity defined by flood-color and flood-opacity."
	},
	"feFuncA": {
		"interface": "SVGFEFuncAElement",
		"attributes": [],
		"description": "The `<feFuncA>` SVG filter primitive defines the transfer function for the alpha component of the input graphic of its parent feComponentTransfer element."
	},
	"feFuncB": {
		"interface": "SVGFEFuncBElement",
		"attributes": [],
		"description": "The `<feFuncB>` SVG filter primitive defines the transfer function for the blue component of the input graphic of its parent feComponentTransfer element."
	},
	"feFuncG": {
		"interface": "SVGFEFuncGElement",
		"attributes": [],
		"description": "The `<feFuncG>` SVG filter primitive defines the transfer function for the green component of the input graphic of its parent feComponentTransfer element."
	},
	"feFuncR": {
		"interface": "SVGFEFuncRElement",
		"attributes": [],
		"description": "The `<feFuncR>` SVG filter primitive defines the transfer function for the red component of the input graphic of its parent feComponentTransfer element."
	},
	"feGaussianBlur": {
		"interface": "SVGFEGaussianBlurElement",
		"attributes": [],
		"description": "The `<feGaussianBlur>` SVG filter primitive blurs the input image by the amount specified in stdDeviation, which defines the bell-curve."
	},
	"feImage": {
		"interface": "SVGFEImageElement",
		"attributes": [],
		"description": "The `<feImage>` SVG filter primitive fetches image data from an external source and provides the pixel data as output (meaning if the external source is an SVG image, it is rasterized.)"
	},
	"feMerge": {
		"interface": "SVGFEMergeElement",
		"attributes": [],
		"description": "The `<feMerge>` SVG element allows filter effects to be applied concurrently instead of sequentially. This is achieved by other filters storing their output via the result attribute and then accessing it in a feMergeNode child."
	},
	"feMergeNode": {
		"interface": "SVGFEMergeNodeElement",
		"attributes": [],
		"description": "## Usage context"
	},
	"feMorphology": {
		"interface": "SVGFEMorphologyElement",
		"attributes": [],
		"description": "The `<feMorphology>` SVG filter primitive is used to erode or dilate the input image. Its usefulness lies especially in fattening or thinning effects."
	},
	"feOffset": {
		"interface": "SVGFEOffsetElement",
		"attributes": [],
		"description": "The `<feOffset>` SVG filter primitive allows to offset the input image. The input image as a whole is offset by the values specified in the dx and dy attributes."
	},
	"fePointLight": {
		"interface": "SVGFEPointLightElement",
		"attributes": [],
		"description": "The `<fePointLight>` filter primitive defines a light source which allows to create a point light effect. It that can be used within a lighting filter primitive: feDiffuseLighting or feSpecularLighting."
	},
	"feSpecularLighting": {
		"interface": "SVGFESpecularLightingElement",
		"attributes": [],
		"description": "The `<feSpecularLighting>` SVG filter primitive lights a source graphic using the alpha channel as a bump map. The resulting image is an RGBA image based on the light color. The lighting calculation follows the standard specular component of the Phong lighting model. The resulting image depends on the light color, light position and surface geometry of the input bump map. The result of the lighting calculation is added. The filter primitive assumes that the viewer is at infinity in the z direction."
	},
	"feSpotLight": {
		"interface": "SVGFESpotLightElement",
		"attributes": [],
		"description": "The `<feSpotLight>` SVG filter primitive defines a light source that can be used to create a spotlight effect."
	},
	"feTile": {
		"interface": "SVGFETileElement",
		"attributes": [],
		"description": "The `<feTile>` SVG filter primitive allows to fill a target rectangle with a repeated, tiled pattern of an input image. The effect is similar to the one of a pattern."
	},
	"feTurbulence": {
		"interface": "SVGFETurbulenceElement",
		"attributes": [],
		"description": "The `<feTurbulence>` SVG filter primitive creates an image using the Perlin turbulence function. It allows the synthesis of artificial textures like clouds or marble. The resulting image will fill the entire filter primitive subregion."
	},
	"filter": {
		"interface": "SVGFilterElement",
		"attributes": [],
		"description": "The `<filter>` SVG element defines a custom filter effect by grouping atomic filter primitives. It is never rendered itself, but must be used by the filter attribute on SVG elements, or the filter CSS property for SVG/HTML elements."
	},
	"foreignObject": {
		"interface": "SVGForeignObjectElement",
		"attributes": [
			"height",
			"width",
			"x",
			"y"
		],
		"description": "The `<foreignObject>` SVG element includes elements from a different XML namespace. In the context of a browser, it is most likely (X)HTML."
	},
	"g": {
		"interface": "SVGGElement",
		"attributes": [],
		"description": "The `<g>` SVG element is a container used to group other SVG elements."
	},
	"glyph": {
		"interface": "SVGGlyphElement",
		"attributes": [],
		"description": "A `<glyph>` defines a single glyph in an SVG font."
	},
	"image": {
		"interface": "SVGImageElement",
		"attributes": [],
		"description": "The `<image>` SVG element includes images inside SVG documents. It can display raster image files or other SVG files."
	},
	"linearGradient": {
		"interface": "SVGLinearGradientElement",
		"attributes": [
			"gradientUnits",
			"gradientTransform",
			"href",
			"spreadMethod",
			"x1",
			"x2",
			"y1",
			"y2"
		],
		"description": "The `<linearGradient>` element lets authors define linear gradients to apply to other SVG elements."
	},
	"marker": {
		"interface": "SVGMarkerElement",
		"attributes": [
			"markerHeight",
			"markerUnits",
			"markerWidth",
			"orient",
			"preserveAspectRatio",
			"refX",
			"refY",
			"viewBox"
		],
		"description": "The `<marker>` element defines the graphic that is to be used for drawing arrowheads or polymarkers on a given path, line, polyline or polygon element."
	},
	"mask": {
		"interface": "SVGMaskElement",
		"attributes": [
			"height",
			"maskContentUnits",
			"maskUnits",
			"x",
			"y",
			"width"
		],
		"description": "The `<mask>` element defines an alpha mask for compositing the current object into the background. A mask is used/referenced using the mask property."
	},
	"metadata": {
		"interface": "SVGMetadataElement",
		"attributes": [],
		"description": "The `<metadata>` SVG element adds metadata to SVG content. Metadata is structured information about data. The contents of `<metadata>` should be elements from other XML namespace such as RDF, FOAF), etc."
	},
	"mpath": {
		"interface": "SVGMPathElement",
		"attributes": [],
		"description": "The `<mpath>` sub-element for the animateMotion element provides the ability to reference an external path element as the definition of a motion path."
	},
	"path": {
		"interface": "SVGPathElement",
		"attributes": [
			"d",
			"pathLength"
		],
		"description": "The `<path>` SVG element is the generic element to define a shape. All the basic shapes can be created with a path element."
	},
	"pattern": {
		"interface": "SVGPatternElement",
		"attributes": [
			"height",
			"href",
			"patternContentUnits",
			"patternTransform",
			"patternUnits",
			"preserveAspectRatio",
			"viewBox",
			"width",
			"x",
			"y"
		],
		"description": "The `<pattern>` element defines a graphics object which can be redrawn at repeated x- and y-coordinate intervals (\"tiled\") to cover an area."
	},
	"radialGradient": {
		"interface": "SVGRadialGradientElement",
		"attributes": [
			"cx",
			"cy",
			"fr",
			"fx",
			"fy",
			"gradientUnits",
			"gradientTransform",
			"href",
			"r",
			"spreadMethod"
		],
		"description": "The `<radialGradient>` element lets authors define radial gradients that can be applied to fill or stroke of graphical elements."
	},
	"rect": {
		"interface": "SVGRectElement",
		"attributes": [
			"x",
			"y",
			"width",
			"height",
			"rx",
			"ry",
			"pathLength"
		],
		"description": "The `<rect>` element is a basic SVG shape that draws rectangles, defined by their position, width, and height. The rectangles may have their corners rounded."
	},
	"script": {
		"interface": "SVGScriptElement",
		"attributes": [
			"crossorigin",
			"href",
			"type"
		],
		"description": "> Note: While SVG's `script` element is equivalent to the HTML {{HTMLElement('script')}} element, it has some discrepancies, like it uses the {{SVGAttr('href')}} attribute instead of {{htmlattrxref('src','script')}} and it doesn't support ECMAScript modules so far (See browser compatibility below for details)"
	},
	"set": {
		"interface": "SVGSetElement",
		"attributes": [
			"to"
		],
		"description": "The SVG `<set>` element provides a simple means of just setting the value of an attribute for a specified duration."
	},
	"stop": {
		"interface": "SVGStopElement",
		"attributes": [
			"offset",
			"stop-color",
			"stop-opacity"
		],
		"description": "The SVG `<stop>` element defines a color and its position to use on a gradient. This element is always a child of a linearGradient or radialGradient element."
	},
	"style": {
		"interface": "SVGStyleElement",
		"attributes": [
			"type",
			"media",
			"title"
		],
		"description": "The SVG `<style>` element allows style sheets to be embedded directly within SVG content."
	},
	"svg": {
		"interface": "SVGSVGElement",
		"attributes": [
			"height",
			"preserveAspectRatio",
			"viewBox",
			"width",
			"x",
			"y"
		],
		"description": "The `svg` element is a container that defines a new coordinate system and viewport. It is used as the outermost element of SVG documents, but it can also be used to embed an SVG fragment inside an SVG or HTML document."
	},
	"switch": {
		"interface": "SVGSwitchElement",
		"attributes": [],
		"description": "The `<switch>` SVG element evaluates any requiredFeatures, requiredExtensions and systemLanguage attributes on its direct child elements in order, and then renders the first child where these attributes evaluate to true."
	},
	"symbol": {
		"interface": "SVGSymbolElement",
		"attributes": [
			"height",
			"preserveAspectRatio",
			"refX",
			"refY",
			"viewBox",
			"width",
			"x",
			"y"
		],
		"description": "The `<symbol>` element is used to define graphical template objects which can be instantiated by a use element."
	},
	"text": {
		"interface": "SVGTextElement",
		"attributes": [
			"x",
			"y",
			"dx",
			"dy",
			"rotate",
			"lengthAdjust",
			"textLength"
		],
		"description": "The SVG `<text>` element draws a graphics element consisting of text. It's possible to apply a gradient, pattern, clipping path, mask, or filter to `<text>`, like any other SVG graphics element."
	},
	"textPath": {
		"interface": "SVGTextPathElement",
		"attributes": [
			"href",
			"lengthAdjust",
			"method",
			"path",
			"side",
			"spacing",
			"startOffset",
			"textLength"
		],
		"description": "To render text along the shape of a path, enclose the text in a `<textPath>` element that has an href attribute with a reference to the path element."
	},
	"title": {
		"interface": "SVGTitleElement",
		"attributes": [],
		"description": "The `<title>` element provides an accessible, short-text description of any SVG container element or graphics element."
	},
	"tref": {
		"interface": "SVGTRefElement",
		"attributes": [],
		"description": "The textual content for a text SVG element can be either character data directly embedded within the text element or the character data content of a referenced element, where the referencing is specified with a `<tref>` element."
	},
	"tspan": {
		"interface": "SVGTSpanElement",
		"attributes": [
			"x",
			"y",
			"dx",
			"dy",
			"rotate",
			"lengthAdjust",
			"textLength"
		],
		"description": "The SVG `<tspan>` element defines a subtext within a {{SVGElement('text')}} element or another `<tspan>` element. It allows for adjustment of the style and/or position of that subtext as needed."
	},
	"use": {
		"interface": "SVGUseElement",
		"attributes": [
			"href",
			"x",
			"y",
			"width",
			"height"
		],
		"description": "The `<use>` element takes nodes from within the SVG document, and duplicates them somewhere else."
	},
	"view": {
		"interface": "SVGViewElement",
		"attributes": [],
		"description": "A view is a defined way to view the image, like a zoom level or a detail view."
	}
}
